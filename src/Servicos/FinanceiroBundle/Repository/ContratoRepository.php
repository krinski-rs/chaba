<?php

namespace Servicos\FinanceiroBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ContratoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContratoRepository extends EntityRepository
{
	private $arrayColumnContrato = array(
		'cont.contCodigoid'
	);

	private $arrayColumnCircuito = array(
		'contPai.contCodigoid AS contPaiCodigoid',
		'contPai.clieCodigoid',
        'cont.contClienteFinal',
		'cont.contCodigoid',
        'stat.statCodigoid',
        'stat.statNome',
		'ativ.ativDataativado',
		'serv.servNome',
		'capa.capaCapacidade',
		'medi.mediNome',
		'medi.mediSigla',
		'desi.desigStt',
		'desi.desigNumero',
		'desi.desigPonta',
		'pais.nome AS nomePais',
		'pais.sigla AS siglaPais',
		'uf.nome AS nomeUf',
		'uf.sigla AS siglaUf',
		'cidades.nome AS nomeCidade',
		'endeentr.endeentrCodigoid',
		'endeentr.endeentrBairro',
		'endeentr.endeentrLogradouro',
		'endeentr.endeentrCep',
		'endeentr.endeentrNumero',
		'endeentr.endeentrConcentrador',
		'COALESCE(endeentr.endeentrDesignadorOld, \'\') AS endeentrDesignadorOld',
		'unid.unidCodigoid',
		'IF(desi.desigStt IS NULL, CONCAT(\'STT-\', contPai.clieCodigoid, \'-\', desi.desigNumero, \'-\', desi.desigPonta), CONCAT(\'STT\', desi.desigStt, LPAD(desi.desigNumero, 4, \'0\')) ) AS designador',
		'CONCAT(capa.capaCapacidade, \' \', medi.mediSigla) AS velocidade',
		'IF(cadUser.tipo = \'J\', cadNomeRazao.nome, \'\') AS razaoSocial',
		'IF(cadUser.tipo = \'J\', cadNomeFantasia.nome, \'\') AS nomeFantasia',
		'IF(cadUser.tipo = \'F\', REPLACE(GROUP_CONCAT(cadNome.nome), \';\', \'\'), \'\') AS nomeCliente',
		'cadUser.cnpj',
		'cadUser.endereco',
		'cadUser.numero',
		'cadUser.cep'
	);

	public function getContrato($contCodigoid){
		try{
			$column = implode(',', $this->arrayColumnContrato);
			$arrayWhere = array(
				array('cont.contCodigoid', '=', (integer)$contCodigoid)
			);
			return $this->findGeral(0, 0, $arrayWhere, array('cont.contCodigoid' => 'ASC'), array('cont.contCodigoid'), $column);
		}catch(\Exception $e){
			throw $e;
		}
	}

	public function countContrato($arrayWhere = array(), $orderBy = array('cont.contCodigoid' => 'ASC'), $groupBy = array()){
		try{
			$column = 'COUNT(DISTINCT cont.contCodigoid) AS total';
			return $this->findGeral(0, 0, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}

	public function countContratoAPI($arrayWhere = array(), $orderBy = array('cont.contCodigoid' => 'ASC'), $groupBy = array()){
		try{
			$column = 'COUNT(DISTINCT cont.contCodigoid) AS total';
			return $this->findAPI(0, 0, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}
	public function listContrato($offset = 0, $limit = 50, $arrayWhere = array(), $orderBy = array('cont.contCodigoid' => 'ASC'), $groupBy = array('cont.contCodigoid')){
		try{
			$column = implode(',', $this->arrayColumnContrato);
			return $this->findGeral($offset, $limit, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}

	public function listCircuito($offset = 0, $limit = 50, $arrayWhere = array(), $orderBy = array('cont.contCodigoid' => 'ASC'), $groupBy = array('cont.contCodigoid')){
		try{
			$column = implode(',', $this->arrayColumnCircuito);
			return $this->findGeral($offset, $limit, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}

	public function listCircuitoRefactor($offset = 0, $limit = 50, $arrayWhere = array(), $orderBy = array('cont.contCodigoid' => 'ASC'), $groupBy = array('cont.contCodigoid')){
		try{
			$column = implode(',', $this->arrayColumnCircuito);
			return $this->findAPI($offset, $limit, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}

	public function getCircuito($contCodigoid){
		try{
			$column = implode(',', $this->arrayColumnCircuito);
			$arrayWhere = array(
					array('cont.contCodigoid', '=', (integer)$contCodigoid)
			);
			return $this->findGeral(0, 0, $arrayWhere, array('cont.contCodigoid' => 'ASC'), array('cont.contCodigoid'), $column);
		}catch(\Exception $ex){
			throw $ex;
		}
	}

	public function listColumn($offset = 0, $limit = 50, $arrayWhere = array(), $orderBy = array('cont.contCodigoid' => 'ASC'), $groupBy = array('cont.contCodigoid'), $column = 'cont.contCodigoid'){
		try{
			return $this->findGeral($offset, $limit, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}

	private function findAPI($offset = 0, $limit = 100, $arrayWhere = array(), $orderBy = array('cont.contCodigoid' => 'ASC'), $groupBy = array(), $column = 'cont.contCodigoid')
	{
		try {
			$query = $this->_em->createQueryBuilder();
			$query->select($column)
			->from("ServicosFinanceiroBundle:Contrato", "cont")
			->innerJoin("cont.statCodigoid", "stat")
			->innerJoin("cont.ativacao", "ativ")
			->innerJoin("cont.contratoservico", "contserv")
			->innerJoin("contserv.servcapaCodigoid", "servcapa")
			->innerJoin("servcapa.servCodigoid", "serv")
			->innerJoin("servcapa.capaCodigoid", "capa")
			->innerJoin("servcapa.mediCodigoid", "medi")
			->leftJoin("cont.desigCodigoid", "desi")
			->leftJoin("cont.endeentrCodigoid", "endeentr")
			->leftJoin("endeentr.admPais", "pais")
			->leftJoin("endeentr.admUf", "uf")
			->leftJoin("endeentr.admCidades", "cidades")
			->leftJoin("cont.unidCodigoid", "unid")
			->leftJoin("cont.contPaicodigoid", "contPai");

			if (count($arrayWhere) > 0) {
				foreach ($arrayWhere as $where) {
					if (count($where) < 3){
						throw new \RuntimeException('Invalid argument');
					}
					$bind_parameter = 'a'.rand(0, 999999);
					if(strtoupper(trim($where[1])) == 'IS NOT'){
						$query->andWhere($where[0].' IS NOT '.$where[2]);
					}elseif (strtoupper(trim($where[1])) == 'IS') {
						$query->andWhere($where[0].' IS '.$where[2]);
					}elseif (strtoupper(trim($where[1])) == 'IN' && (count($where[2]) || count(explode(',', $where[2])))){
						if(!is_array($where[2])){
							$where[2] = explode(',', $where[2]);
						}
						$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
						$values = array_values($where[2]);

						if(is_integer($values[0])){
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
						}else{
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
						}

					}elseif(strtoupper(trim($where[1])) == 'NOT IN' && (count($where[2]) || count(explode(',', $where[2])))){
						if(!is_array($where[2])){
							$where[2] = explode(',', $where[2]);
						}
						$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
						$values = array_values($where[2]);

						if(is_integer($values[0])){
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
						}else{
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
						}
					}else{
						$query->andWhere($where[0].' '.$where[1].' :'.$bind_parameter);
						$query->setParameter($bind_parameter, $where[2]);
					}
				}
			}

			if(is_array($groupBy) && count($groupBy)){
				foreach($groupBy as $group){
					$query->addGroupBy($group);
				}
			}

			if(is_array($orderBy) && count($orderBy)){
				foreach($orderBy as $order => $sort){
					$query->addOrderBy($order, $sort);
				}
			}

			if($offset){
				$query->setFirstResult($offset);
			}

			if($limit){
				$query->setMaxResults($limit);
			}

			return $query->getQuery()->execute();

		}catch (\Exception $e){
			throw new \Exception($e->getMessage(), $e->getCode());
		}
	}

	private function findGeral($offset = 0, $limit = 100, $arrayWhere = array(), $orderBy = array('cont.contCodigoid' => 'ASC'), $groupBy = array(), $column = 'cont.contCodigoid')
	{
		try {
			$query = $this->_em->createQueryBuilder();
			$query->select($column)
			->from("ServicosFinanceiroBundle:Contrato", "cont")
			->innerJoin("cont.statCodigoid", "stat")
			->innerJoin("cont.ativacao", "ativ")
			->innerJoin("cont.contratoservico", "contserv")
			->innerJoin("contserv.servcapaCodigoid", "servcapa")
			->innerJoin("servcapa.servCodigoid", "serv")
			->innerJoin("servcapa.capaCodigoid", "capa")
			->innerJoin("servcapa.mediCodigoid", "medi")
			->leftJoin("cont.desigCodigoid", "desi")
			->leftJoin("cont.endeentrCodigoid", "endeentr")
			->leftJoin("endeentr.admPais", "pais")
			->leftJoin("endeentr.admUf", "uf")
			->leftJoin("endeentr.admCidades", "cidades")
			->leftJoin("cont.unidCodigoid", "unid")

			->leftJoin("cont.contPaicodigoid", "contPai")
			->leftJoin("contPai.customers", "cust")
			->leftJoin("cust.cadUser", "cadUser")
			->leftJoin("cadUser.segmento", "cadUserSegmento")

			->leftJoin("cadUser.cadUsersNome", "cadNomeRazao", 'WITH', 'cadNomeRazao.admTipoNome = 5 AND cadUser.tipo = \'J\'')

			->leftJoin("cadUser.cadUsersNome", "cadNomeFantasia", 'WITH', 'cadNomeFantasia.admTipoNome = 6 AND cadUser.tipo = \'J\'')

			->leftJoin("cadUser.cadUsersNome", "cadNome", 'WITH', 'cadNome.admTipoNome IN (1,2,3) AND cadUser.tipo = \'F\'')

			->leftJoin("contPai.ativacao", "ativPai")
			->leftJoin("contPai.statCodigoid", "statPai")
			->leftJoin("contPai.unidCodigoid", "unidPai")
			->leftJoin("contPai.contratoservico", "contservPai")
			->leftJoin("contservPai.servcapaCodigoid", "servcapaPai")
			->leftJoin("servcapaPai.servCodigoid", "servPai")
			->leftJoin("servcapaPai.capaCodigoid", "capaPai")
			->leftJoin("servcapaPai.mediCodigoid", "mediPai")
			//->leftJoin("line.billing", "bill", 'WITH', 'TO_CHAR(bill.billTimeStart, \'YYYY-MM\') = montpaym.usePeriod')
			;

			if (count($arrayWhere) > 0) {
				foreach ($arrayWhere as $where) {
					if (is_array($where) && count($where) < 3){
						throw new \RuntimeException('Invalid argument');
					}
					$bind_parameter = 'a'.rand(0, 999999);
					if (is_string($where) && strlen($where) > 0) {
						$query->andWhere($where);
					} elseif (strtoupper(trim($where[1])) == 'IS NOT'){
						$query->andWhere($where[0].' IS NOT '.$where[2]);
					}elseif (strtoupper(trim($where[1])) == 'IS') {
						$query->andWhere($where[0].' IS '.$where[2]);
					}elseif (strtoupper(trim($where[1])) == 'IN' && (count($where[2]) || count(explode(',', $where[2])))){
						if(!is_array($where[2])){
							$where[2] = explode(',', $where[2]);
						}
						$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
						$values = array_values($where[2]);

						if(is_integer($values[0])){
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
						}else{
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
						}

					}elseif(strtoupper(trim($where[1])) == 'NOT IN' && (count($where[2]) || count(explode(',', $where[2])))){
						if(!is_array($where[2])){
							$where[2] = explode(',', $where[2]);
						}
						$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
						$values = array_values($where[2]);

						if(is_integer($values[0])){
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
						}else{
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
						}
					}else{
						$query->andWhere($where[0].' '.$where[1].' :'.$bind_parameter);
						$query->setParameter($bind_parameter, $where[2]);
					}
				}
			}

			if(is_array($groupBy) && count($groupBy)){
				foreach($groupBy as $group){
					$query->addGroupBy($group);
				}
			}

			if(is_array($orderBy) && count($orderBy)){
				foreach($orderBy as $order => $sort){
					$query->addOrderBy($order, $sort);
				}
			}

			if($offset){
				$query->setFirstResult($offset);
			}

			if($limit){
				$query->setMaxResults($limit);
			}

			return $query->getQuery()->execute();

		}catch (\Exception $e){
			throw new \Exception($e->getMessage(), $e->getCode());
		}
	}

	public function listRelatorioVisistas($offset = 0, $limit = 100, array $arrayWhere = array(), array $orderBy = array('cont.contCodigoid' => 'ASC'), array $groupBy = array(), array $column = array('cont.contCodigoid'))
	{
		try {
			$column = implode(',', $column);
			$query = $this->_em->createQueryBuilder();
			$query->select($column)
			->from("ServicosFinanceiroBundle:Contrato", "cont")

			->leftJoin("cont.contPaicodigoid", "contPai")
			->leftJoin("contPai.customers", "cust")
			->leftJoin("cust.cadUser", "cadUser")
			->leftJoin("cadUser.segmento", "cadUserSegmento")

			->leftJoin("cust.relGn", "relGn")
			->leftJoin("relGn.usuarioid", "usuagn")

			->leftJoin("cadUser.cadUsersNome", "cadNomeRazao", 'WITH', 'cadNomeRazao.admTipoNome = 5 AND cadUser.tipo = \'J\'')
			->leftJoin("cadUser.cadUsersNome", "cadNomeFantasia", 'WITH', 'cadNomeFantasia.admTipoNome = 6 AND cadUser.tipo = \'J\'')
			->leftJoin("cadUser.cadUsersNome", "cadNome", 'WITH', 'cadNome.admTipoNome IN (1,2,3) AND cadUser.tipo = \'F\'')

			->leftJoin("contPai.ativacao", "ativPai")
			->leftJoin("contPai.statCodigoid", "statPai")
			->leftJoin("contPai.unidCodigoid", "unidPai")
			->leftJoin("contPai.contratoservico", "contservPai")
			->leftJoin("contservPai.servcapaCodigoid", "servcapaPai")
			->leftJoin("servcapaPai.servCodigoid", "servPai")
			->leftJoin("servcapaPai.capaCodigoid", "capaPai")
			->leftJoin("servcapaPai.mediCodigoid", "mediPai");

			if (count($arrayWhere) > 0) {
				foreach ($arrayWhere as $where) {
					if (count($where) < 3){
						throw new \RuntimeException('Invalid argument');
					}
					$bind_parameter = 'a'.rand(0, 999999);
					if(strtoupper(trim($where[1])) == 'IS NOT'){
						$query->andWhere($where[0].' IS NOT '.$where[2]);
					}elseif (strtoupper(trim($where[1])) == 'IS') {
						$query->andWhere($where[0].' IS '.$where[2]);
					}elseif (strtoupper(trim($where[1])) == 'IN' && (count($where[2]) || count(explode(',', $where[2])))){
						if(!is_array($where[2])){
							$where[2] = explode(',', $where[2]);
						}
						$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
						$values = array_values($where[2]);

						if(is_integer($values[0])){
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
						}else{
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
						}

					}elseif(strtoupper(trim($where[1])) == 'NOT IN' && (count($where[2]) || count(explode(',', $where[2])))){
						if(!is_array($where[2])){
							$where[2] = explode(',', $where[2]);
						}
						$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
						$values = array_values($where[2]);

						if(is_integer($values[0])){
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
						}else{
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
						}
					}else{
						$query->andWhere($where[0].' '.$where[1].' :'.$bind_parameter);
						$query->setParameter($bind_parameter, $where[2]);
					}
				}
			}

			if(is_array($groupBy) && count($groupBy)){
				foreach($groupBy as $group){
					$query->addGroupBy($group);
				}
			}

			if(is_array($orderBy) && count($orderBy)){
				foreach($orderBy as $order => $sort){
					$query->addOrderBy($order, $sort);
				}
			}

			if($offset){
				$query->setFirstResult($offset);
			}

			if($limit){
				$query->setMaxResults($limit);
			}

			return $query->getQuery()->execute();

		}catch (\Exception $e){
			throw new \Exception($e->getMessage(), $e->getCode());
		}
	}

    public function getContratosRelatorioFinanceiro($array, $aux = false)
    {
        try{

            $query = $this->_em->createQueryBuilder();
            $query->select(
                "filho.contCodigoid as id,
                 pai.clieCodigoid as cid,
                 ativacao.ativDataativado,
                 pai.contDatainc as iternalizado,
                 pai.contDataassinatura,
                 if(desig.desigStt is not null,
                    CONCAT('STT', desig.desigStt, LPAD(desig.desigNumero,4,0), ''),
                    CONCAT('STT-', desig.clieCodigoid, '-', desig.desigNumero,'-', desig.desigPonta)
                    ) as designacao,
                 segm.descricao as segmento,
                 nomeCliente.nome as nome,
                 if(cad.tipo = 'F',cad.cpf,cad.cnpj) as cnpj,
                 nomeFilial.nome as filial,
                 cadFilial.cnpj as filialCnpj,
                 pai.contCodigoid as papai
                "
            )->from('ServicosFinanceiroBundle:Contrato', 'pai')
             ->innerJoin('pai.contratoFilho', 'filho')
             ->leftJoin('filho.ativacao', 'ativacao')
             ->leftJoin('filho.desigCodigoid', 'desig')

             ->innerJoin('ServicosGcdbBundle:Customers2users', 'c2u', 'WITH', 'c2u.idCustomers = pai.clieCodigoid')
             ->innerJoin('c2u.idUsers', 'cad')
             ->innerJoin('cad.cadUsersNome', 'nomeCliente')
             ->leftJoin('cad.segmento', 'segm')

             ->innerJoin('ServicosLumaBundle:Unidade', 'unid', 'WITH', 'unid.unidCodigoid = pai.unidCodigoid')
             ->innerJoin('ServicosGcdbBundle:Customers2users', 'c2uFilial', 'WITH', 'c2uFilial.idCustomers = unid.unidStechcodigoid')
             ->innerJoin('c2uFilial.idUsers', 'cadFilial')
             ->innerJoin('cadFilial.cadUsersNome', 'nomeFilial');

             if($aux){
             	$query->where("filho.contDatainc > '".$array['de']->format('Y-m-d')."'")
             	->andWhere("filho.contDatainc < '".$array['ate']->format('Y-m-d')."'")
             	->andWhere("pai.contCodigoid IN ( ". $array['contratos']." )");
             } else{
	             $query->where("filho.contDatainc > '".$array['de']->format('Y-m-d')."'")
	             ->andWhere("filho.contDatainc < '".$array['ate']->format('Y-m-d')."'")
	             ->andWhere("filho.contCodigoid IN ( ". $array['contratos']." )");
             }

             $query->groupBy('filho.contCodigoid');
//            echo $query->getQuery()->getSQL();die();

            return $query->getQuery()->execute();
        }catch (\Exception $e){
            throw new \Exception($e->getMessage(), $e->getCode());
        }
    }
	public function listarCampoHaving($campo = "cont", $where = "1=1", $orderBy = array(), $groupBy = array(), $arrayHaving = array(), $offset = 0, $limit = 0){
		try{
			$query = $this->createQueryBuilder("cont");
			$query->select($campo)
				  ->leftJoin("cont.slaCodigoid", "sla")
				  ->innerJoin("cont.statCodigoid", "stat")
				  ->innerJoin("cont.contratovalor", "contvalo")
				  ->innerJoin("contvalo.natuCodigoid", "natu")
				  ->innerJoin("contvalo.moedCodigoid", "moed")
				  ->innerJoin("cont.contratoservico", "contServi")
				  ->innerJoin("contServi.servcapaCodigoid", "serviCap")
				  ->innerJoin("serviCap.servCodigoid", "servico")
				  ->leftJoin("cont.duracaocontrato", "duracont")
				  ->leftJoin("cont.ativacao", "ativ")
				  ->leftJoin("contvalo.contvaloProximocodigoid", "prox")
				  ->leftJoin("contvalo.contvaloAnteriorcodigoid", "ant")
				  ->leftJoin("contvalo.periodicidade", "peri")
				  ->leftJoin("cont.multCodigoid", "mult");

			if($where){
				$query->where($where);
			}
			if(is_array($groupBy) && count($groupBy)){
				reset($groupBy);
				$inicio = 0;
				while($group = current($groupBy)){
					if($inicio){
						$query->addGroupBy($group);
					}else{
						$query->groupBy($group);
						$inicio = 1;
					}
					next($groupBy);
				}
			}

			if(is_array($arrayHaving) && count($arrayHaving)){
				reset($arrayHaving);
				while($having = current($arrayHaving)){
					if(key($arrayHaving)){
						if(is_array($having) && array_key_exists('AND', $having)){
							$query->andHaving($having['AND']);
						}elseif(is_array($having) && array_key_exists('OR', $having)){
							$query->orHaving($having['OR']);
						}else{
							$query->andHaving($having);
						}
					}else{
						$query->having($having);
					}
					next($arrayHaving);
				}
			}

			if(is_array($orderBy) && count($orderBy)){
				reset($orderBy);
				$inicio = 0;
				while($order = current($orderBy)){
					$sort = key($orderBy);
					//echo "$sort::$order";
					if($inicio){
						$query->addOrderBy($sort, $order);
					}else{
						$query->orderBy($sort, $order);
						$inicio = 1;
					}
					next($orderBy);
				}
			}
			if($offset){
				 $query->setFirstResult($offset);
			}
			if($limit){
				$query->setMaxResults( $limit );
			}
			return $query->getQuery()->execute();
		}catch(exception $ex){
			return $ex;
		}
	}

}
