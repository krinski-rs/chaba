<?php

namespace Servicos\RhBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * RhColaboradorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RhColaboradorRepository extends EntityRepository
{
	private $arrayColumnColaborador = array(
		'cola.idColaborador',
		'cola.idCadUserSistech',
		'cola.idAltUsuarioSistech',
		'cola.unidCodigoid',
		'cola.matricula',
		'cola.fone',
		'cola.endereco',
		'cola.dataNascimento',
		'cola.localNascimento',
		'cola.estadoCivil',
		'cola.nome',
		'cola.filiacaoProfissao',
		'cola.sexo',
		'cola.dataInc',
		'cola.cpf',
		'cola.registrante',
		'cola.ativo'
	);
	
	private $arrayColumnAutUsuarios = array(
		'autUsuar.id',
		'autUsuar.username',
		'autUsuar.nome',
		//'autUsuar.pass',
		'autUsuar.ativo',
		//'autUsuar.salt'
	);

	private $arrayColumnAutPermissoes = array(
		'autOpco.id AS idPermissao',
		'autOpco.nome AS nomePermissao',
		'autPerm.permissao'
	);

	private $arrayColumnAutGrupos = array(
		'autGrup.id AS idGrupo',
		'autGrup.nome AS nomeGrupo'
	);

	private $arrayColumnAutPermissoesGrupos = array(
		'autOpcoGrup.id AS idPermissao',
		'autOpcoGrup.nome AS nomePermissao',
		'autPermGrup.permissao'
	);
	
	public function getColaborador($idColaborador){
		try{
			$column = implode(',', $this->arrayColumnColaborador);
			$arrayWhere = array(
				array('cola.idColaborador', '=', (integer)$idColaborador)
			);
			return $this->findGeral(0, 0, $arrayWhere, array('cola.idColaborador' => 'ASC'), array('cola.idColaborador'), $column);
		}catch(\Exception $ex){
			throw $ex;
		}
	}

	public function getAutUsuarios($id){
		try{
			$column = implode(',', $this->arrayColumnAutUsuarios);
			$arrayWhere = array(
				array('autUsuar.id', '=', (integer)$id)
			);
			return $this->findGeral(0, 0, $arrayWhere, array('cola.idColaborador' => 'ASC'), array('cola.idColaborador'), $column);
		}catch(\Exception $ex){
			throw $ex;
		}
	}
	

	public function getPermissoes($id){
		try{
			$column = implode(',', $this->arrayColumnAutPermissoes);
			$arrayWhere = array(
				array('autUsuar.id', '=', (integer)$id),
				array('autOpco.visivel', '=', 1),
				array('autPerm.permissao', '>=', 1)
			);
			return $this->findGeral(0, 0, $arrayWhere, array('autOpco.id' => 'ASC'), array('autOpco.id'), $column);
		}catch(\Exception $ex){
			throw $ex;
		}
	}

	public function getPermissoesGrupo($id){
		try{
			$column = implode(',', $this->arrayColumnAutPermissoesGrupos);
			$arrayWhere = array(
				array('autUsuar.id', '=', (integer)$id),
				array('autOpcoGrup.visivel', '=', 1),
				array('autPermGrup.permissao', '>=', 1)
			);
			return $this->findGeral(0, 0, $arrayWhere, array('autOpcoGrup.id' => 'ASC'), array('autOpcoGrup.id'), $column);
		}catch(\Exception $ex){
			throw $ex;
		}
	}
	
	public function getGrupos($id){
		try{
			$column = implode(',', $this->arrayColumnAutGrupos);
			$arrayWhere = array(
				array('autUsuar.id', '=', (integer)$id)
			);
			return $this->findGeral(0, 0, $arrayWhere, array('autGrup.id' => 'ASC'), array('autGrup.id'), $column);
		}catch(\Exception $ex){
			throw $ex;
		}
	}
	
	public function countColaborador($arrayWhere = array(), $orderBy = array('cola.idColaborador' => 'ASC'), $groupBy = array()){
		try{
			$column = 'COUNT(DISTINCT cola.idColaborador) AS total';
			return $this->findGeral(0, 0, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}

	public function listColaborador($offset = 0, $limit = 50, $arrayWhere = array(), $orderBy = array('cola.idColaborador' => 'ASC'), $groupBy = array('cola.idColaborador')){
		try{
			$column = implode(',', $this->arrayColumnColaborador);
			return $this->findGeral($offset, $limit, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}

	public function countAutUsuarios($arrayWhere = array(), $orderBy = array('autUsuar.id' => 'ASC'), $groupBy = array()){
		try{
			$column = 'COUNT(DISTINCT autUsuar.id) AS total';
			return $this->findGeral(0, 0, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}
	
	public function listAutUsuarios($offset = 0, $limit = 50, $arrayWhere = array(), $orderBy = array('cola.idColaborador' => 'ASC'), $groupBy = array('cola.idColaborador')){
		try{
			$column = implode(',', $this->arrayColumnAutUsuarios);
			return $this->findGeral($offset, $limit, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}
	
	private function findGeral($offset = 0, $limit = 100, $arrayWhere = array(), $orderBy = array('cola.idColaborador' => 'ASC'), $groupBy = array(), $column = 'cola.idColaborador')
	{
		try {
			$query = $this->_em->createQueryBuilder();
			$query->select($column)
			->from("ServicosRhBundle:RhColaborador", "cola")
			->innerJoin("cola.autUsuarios", "autUsuar")
			->leftJoin("ServicosRhBundle:RhColaboradorDepartamento", "depa", "WITH", "cola.idColaborador = depa.idColaborador")
			->leftJoin("autUsuar.autPermissoes", "autPerm")
			->leftJoin("autPerm.autOpcoes", "autOpco")
			->leftJoin("autUsuar.autUsuariosHasGrupos", "autUsuarGrup")
			->leftJoin("autUsuarGrup.autGrupos", "autGrup")
			->leftJoin("autGrup.autPermissoesGrupos", "autPermGrup")
			->leftJoin("autPermGrup.autOpcoes", "autOpcoGrup")
			//->leftJoin("line.billing", "bill", 'WITH', 'TO_CHAR(bill.billTimeStart, \'YYYY-MM\') = montpaym.usePeriod')
			;

			if (count($arrayWhere) > 0) {
				foreach ($arrayWhere as $where) {
					if (count($where) < 3){
						throw new \RuntimeException('Invalid argument');
					}
					$bind_parameter = 'a'.rand(0, 999999);
					if(strtoupper(trim($where[1])) == 'IS NOT'){
						$query->andWhere($where[0].' IS NOT '.$where[2]);
					}elseif (strtoupper(trim($where[1])) == 'IS') {
						$query->andWhere($where[0].' IS '.$where[2]);
					}elseif (strtoupper(trim($where[1])) == 'IN' && (count($where[2]) || count(explode(',', $where[2])))){
						if(!is_array($where[2])){
							$where[2] = explode(',', $where[2]);
						}
						$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
						$values = array_values($where[2]);
	
						if(is_integer($values[0])){
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
						}else{
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
						}
	
					}elseif(strtoupper(trim($where[1])) == 'NOT IN' && (count($where[2]) || count(explode(',', $where[2])))){
						if(!is_array($where[2])){
							$where[2] = explode(',', $where[2]);
						}
						$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
						$values = array_values($where[2]);
	
						if(is_integer($values[0])){
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
						}else{
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
						}
					}else{
						$query->andWhere($where[0].' '.$where[1].' :'.$bind_parameter);
						$query->setParameter($bind_parameter, $where[2]);
					}
				}
			}
	
			if(is_array($groupBy) && count($groupBy)){
				foreach($groupBy as $group){
					$query->addGroupBy($group);
				}
			}
	
			if(is_array($orderBy) && count($orderBy)){
				foreach($orderBy as $order => $sort){
					$query->addOrderBy($order, $sort);
				}
			}
	
			if($offset){
				$query->setFirstResult($offset);
			}
				
			if($limit){
				$query->setMaxResults($limit);
			}
				
			return $query->getQuery()->execute();
	
		}catch (\Exception $e){
			throw new \Exception($e->getMessage(), $e->getCode());
		}
	}
}
