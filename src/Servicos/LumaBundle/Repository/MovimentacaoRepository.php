<?php

namespace Servicos\LumaBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MovimentacaoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovimentacaoRepository extends EntityRepository
{
    public function movimentacaoTransito($arrayParams = array())
    {
        $query = $this->_em->createQueryBuilder();
        $query->select($arrayParams['campos'])
            ->from('ServicosLumaBundle:MovimentacaoTransito', 'moviTransito')
            ->leftJoin('moviTransito.unidCodigoid', 'unidTransito')
            ->innerJoin('moviTransito.moviCodigoid', 'movi')
            ->innerJoin('movi.moviProdutos', 'moviProduto')
            ->innerJoin('moviProduto.estoprodCodigoid', 'estoProduto')
            ->innerJoin('estoProduto.prodCodigoid', 'produto')
            ->innerJoin('movi.unidDecodigoid', 'moviUnidDe')
            ->leftJoin('moviUnidDe.unidPaicodigoid', 'moviUnidPaiDe')
            ->innerJoin('movi.unidParacodigoid', 'moviUnidPara')
            ->leftJoin('moviUnidPara.unidPaicodigoid', 'moviUnidPaiPara');

        if(key_exists('where', $arrayParams) && count($arrayParams['where'])){
            $query->where('1 = 1');
            foreach($arrayParams['where'] as $key => $filter){
                $query->andWhere("$filter[0] $filter[1] $filter[2]");
            }
        }

        if (key_exists('limit', $arrayParams)){
            $query->setMaxResults($arrayParams['limit']);
        }

        if (key_exists('offset', $arrayParams)){
            $query->setFirstResult($arrayParams['offset']);
        }

        if(key_exists('groupBy', $arrayParams)){
            $query->groupby($arrayParams['groupBy']);
        }

        if (key_exists('order', $arrayParams) && trim($arrayParams['order']) != '' && isset($arrayParams['sort'])){
            $query->addOrderBy($arrayParams['sort'], $arrayParams['order']);
        }
        return $query->getQuery()->getArrayResult();
    }
}
