<?php

namespace Servicos\LumaBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * OrdemcotacaounidadeprodutoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdemcotacaounidadeprodutoRepository extends EntityRepository
{
    public function getItensOCIntegracaoProtheus($arrayParams = array())
    {
        $query = $this->_em->createQueryBuilder();
        $query->select($arrayParams['campos'])
            ->from('ServicosLumaBundle:Ordemcotacaounidadeproduto', 'ocup') //CadUser Cliente
            ->innerJoin('ServicosLumaBundle:Ordem', 'oc', 'WITH', 'ocup.ordeCodigoid = oc.ordeCodigoid AND oc.tipoCodigoid = 47 ')
            ->innerJoin('ServicosLumaBundle:Cotacaounidadeproduto', 'cup', 'WITH', 'cup.cotaunidprodCodigoid = ocup.cotaunidprodCodigoid')
            ->innerJoin('ServicosLumaBundle:Produto', 'prod', 'WITH', 'prod.prodCodigoid = cup.prodCodigoid')
            ->innerJoin('ServicosLumaBundle:Cotacaounidade', 'cunid', 'WITH', 'cunid.cotaunidCodigoid = cup.cotaunidCodigoid')



            ->leftJoin('ServicosLumaBundle:Cotacaounidadeformapagamento', 'cufp', 'WITH', 'cufp.cotaunidCodigoid = cunid.cotaunidCodigoid')
            ->leftJoin('ServicosLumaBundle:CondicaoPagamento', 'condUnidPag', 'WITH', 'condUnidPag.id = cufp.idCondicaoPagamento ')

            ->innerJoin('ServicosLumaBundle:Cotacao', 'cota', 'WITH', 'cota.cotaCodigoid = cunid.cotaCodigoid')
            ->innerJoin('ServicosLumaBundle:Cotacaosolicitacao', 'cotaSolit', 'WITH', 'cotaSolit.cotaCodigoid = cota.cotaCodigoid')
            ->innerJoin('ServicosLumaBundle:Solicitacao', 'soli', 'WITH', 'soli.soliCodigoid = cotaSolit.soliCodigoid')
            ->innerJoin('ServicosLumaBundle:CentroCusto', 'ccu', 'WITH', 'ccu.id = soli.centroCusto')
            ->innerJoin('ServicosLumaBundle:Solicitacaoproduto', 'solip', 'WITH', 'soli.soliCodigoid = solip.soliCodigoid AND solip.prodCodigoid = cup.prodCodigoid')

            ->leftJoin('ServicosGcdbBundle:CadUsers', 'cad_user', 'WITH', 'cad_user.id = soli.cadUserFilial')


            ->leftJoin('ServicosLumaBundle:Unidade', 'unidForn', 'WITH', 'unidForn.unidCodigoid = cunid.unidCodigoid')

            ->leftJoin('ServicosGcdbBundle:CadUsers', 'cad_user_forn', 'WITH', 'cad_user_forn.id = unidForn.unidStechcodigoid')

            ->leftJoin('ServicosLumaBundle:OrdemInterna', 'oi', 'WITH', 'soli.ordemInterna = oi.id')

            ->groupby('cup.cotaunidprodCodigoid')
            ->addGroupBy('oi.id');
        if(key_exists('where', $arrayParams) && count($arrayParams['where'])){
            $query->where('1 = 1');
            foreach($arrayParams['where'] as $key => $filter){
                $query->andWhere("$filter[0] $filter[1] $filter[2]");
            }
        }


        return $query->getQuery()->getArrayResult();
    }

    public function listarCampo($campo, $where = "", $sort = "", $order = "", $offset = 0, $limit = 0){
        try{
            $query = $this->_em->createQueryBuilder();
            $query->select("$campo")
                  ->from('ServicosLumaBundle:Ordemcotacaounidadeproduto', 'ordecotaunidprod')
                  ->innerJoin('ordecotaunidprod.cotaunidprodCodigoid', 'cotaunidprod')
                  ->innerJoin('ordecotaunidprod.ordeCodigoid', 'orde')
                  ->innerJoin('orde.tipoCodigoid', 'tipo')
                  ->innerJoin('cotaunidprod.cotaunidCodigoid', 'cotaunid')
                  ->innerJoin('cotaunid.unidCodigoid', 'unid')
                  ->innerJoin('cotaunidprod.prodCodigoid', 'prod')
                  ->innerJoin('prod.cateCodigoid', 'cate');
            if($where){
                $query->where($where);
            }
            if($sort && $order){
                $query->orderBy($sort, $order);
            }
            if($offset){
                 $query->setFirstResult($offset);
            }
            if($limit){
                $query->setMaxResults( $limit );
            }
            return $query->getQuery()->execute();
        }catch(exception $ex){
            return $ex;
        }
    }

    
    public function listarSolicitacao2($ordeCodigoid){
        try{
            $rsm = new \Doctrine\ORM\Query\ResultSetMapping;
            $rsm->addEntityResult('ServicosLumaBundle:Solicitacao', 'soli');
            $rsm->addFieldResult('soli', 'soli_codigoid', 'soliCodigoid');
            $rsm->addFieldResult('soli', 'soli_datainc', 'soliDatainc');
            $rsm->addFieldResult('soli', 'soli_prazoentrerga', 'soliPrazoentrerga');
            $rsm->addFieldResult('soli', 'soli_ativo', 'soliAtivo');
            $rsm->addFieldResult('soli', 'usua_codigoid', 'usuaCodigoid');
            $rsm->addFieldResult('soli', 'soli_observacao', 'soliObservacao');

            $strQuery = "SELECT soli.* FROM ordemcotacaounidadeproduto AS ordecotaunidprod
                    INNER JOIN cotacaounidadeproduto AS cotaunidprod USING(cotaunidprod_codigoid)
                    INNER JOIN cotacaounidade AS cotaunid USING (cotaunid_codigoid)
                    INNER JOIN cotacaosolicitacao AS cotasoli USING (cota_codigoid)
                    INNER JOIN solicitacao AS soli USING (soli_codigoid)
                    WHERE ordecotaunidprod.orde_codigoid = ?";
            $query = $this->_em->createNativeQuery($strQuery, $rsm);
            $query->setParameter(1, $ordeCodigoid);
            return $query->getResult();
        }catch(exception $ex){
            return $ex;
        }
    }

    public function listarPendencia($campo, $where = "", $sort = "", $order = "", $offset = 0, $limit = 0, $group = 0){
        try{
            $query = $this->createQueryBuilder('ordemcotaunidprod');
            $query->select($campo)
                  ->innerJoin('ordemcotaunidprod.ordeCodigoid', 'orde')
                  ->innerJoin('ordemcotaunidprod.cotaunidprodCodigoid', 'cotaunidprod')
                  ->innerJoin('cotaunidprod.cotaunidCodigoid', 'cotaunid')
                  ->innerJoin('cotaunid.unidCodigoid', 'unid')
                  ->innerJoin('orde.tipoCodigoid', 'tipo')
                  ->innerJoin('cotaunidprod.prodCodigoid', 'prod')
                  ->leftJoin('cotaunid.cotaCodigoid', 'cota');

            if($where){
                $query->where($where);
            }
            if($sort && $order){
                $query->orderBy($sort, $order);
            }
            if($offset){
                 $query->setFirstResult($offset);
            }
            if($limit){
                $query->setMaxResults( $limit );
            }
            if($group) {
                $query->addGroupBy($group);
            }
            return $query->getQuery()->execute();
        }catch(exception $ex){
            return $ex;
        }
    }

    public function listarCampoGroupBy($campo = "ordecotaunidprod", $where = "1=1", $orderBy = array(), $groupBy = array(), $offset = 0, $limit = 0){
        try{
            $query = $this->createQueryBuilder('ordecotaunidprod');
            $query->select($campo)
                  ->innerJoin('ordecotaunidprod.cotaunidprodCodigoid', 'cotaunidprod')
                  ->innerJoin('ordecotaunidprod.ordeCodigoid', 'orde')
                  ->innerJoin('orde.tipoCodigoid', 'tipo')
                  ->innerJoin('cotaunidprod.cotaunidCodigoid', 'cotaunid')
                  ->innerJoin('cotaunid.unidCodigoid', 'unid')
                  ->innerJoin('cotaunidprod.prodCodigoid', 'prod')
                  ->innerJoin('prod.cateCodigoid', 'cate');
            if($where){
                $query->where($where);
            }
            if(is_array($groupBy) && count($groupBy)){
                reset($groupBy);
                $inicio = 0;
                while($group = current($groupBy)){
                    if($inicio){
                        $query->addGroupBy($group);
                    }else{
                        $query->groupBy($group);
                        $inicio = 1;
                    }
                    next($groupBy);
                }
            }
            if(is_array($orderBy) && count($orderBy)){
                reset($orderBy);
                $inicio = 0;
                while($order = current($orderBy)){
                    $sort = key($orderBy);
                    if($inicio){
                        $query->addOrderBy($sort, $order);
                    }else{
                        $query->orderBy($sort, $order);
                        $inicio = 1;
                    }
                    next($orderBy);
                }
            }
            if($offset){
                $query->setFirstResult($offset);
            }
            if($limit){
                $query->setMaxResults( $limit );
            }
            return $query->getQuery()->execute();
        }catch(exception $ex){
            return $ex;
        }
    }
    

}
