<?php

namespace Servicos\LumaBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * OrdemcotacaounidadeprodutoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdemRepository extends EntityRepository
{
    public function search($arrayParams = array())
    {
        $query = $this->_em->createQueryBuilder();
        $query->select($arrayParams['campos'])
            ->from('ServicosLumaBundle:Ordemcotacaounidadeproduto', 'ocup') //CadUser Cliente
            ->innerJoin('ServicosLumaBundle:Ordem', 'oc', 'WITH', 'ocup.ordeCodigoid = oc.ordeCodigoid')
            ->innerJoin('ServicosLumaBundle:Cotacaounidadeproduto', 'cup', 'WITH', 'cup.cotaunidprodCodigoid = ocup.cotaunidprodCodigoid')
            ->innerJoin('ServicosLumaBundle:Produto', 'prod', 'WITH', 'prod.prodCodigoid = cup.prodCodigoid')
            ->innerJoin('ServicosLumaBundle:Cotacaounidade', 'cunid', 'WITH', 'cunid.cotaunidCodigoid = cup.cotaunidCodigoid')
            ->innerJoin('ServicosLumaBundle:Cotacao', 'cota', 'WITH', 'cota.cotaCodigoid = cunid.cotaCodigoid')
            ->innerJoin('ServicosLumaBundle:Cotacaosolicitacao', 'cotaSolit', 'WITH', 'cotaSolit.cotaCodigoid = cota.cotaCodigoid')
            ->innerJoin('ServicosLumaBundle:Solicitacao', 'soli', 'WITH', 'soli.soliCodigoid = cotaSolit.soliCodigoid')
            ->innerJoin('ServicosLumaBundle:Unidade', 'unid', 'WITH', 'unid.unidCodigoid = soli.unidCodigoid')
            ->innerJoin('ServicosLumaBundle:Unidade', 'unidPai', 'WITH', 'unidPai.unidCodigoid = unid.unidPaicodigoid ')
            ->innerJoin('ServicosGcdbBundle:Customers2users', 'c2u', 'WITH', 'c2u.idCustomers = unidPai.unidStechcodigoid')
            ->innerJoin('ServicosGcdbBundle:CadUsers', 'cad_user', 'WITH', 'cad_user.id = c2u.idUsers')
            ->leftJoin('ServicosGcdbBundle:CadLigacaoU2u', 'u2u', 'WITH', '(cad_user.id = u2u.cadUsers OR cad_user.id = u2u.cadUsers2) and u2u.admTipoLigacao = 13')
            ->leftJoin('ServicosGcdbBundle:CadUsers', 'cad_user_matriz', 'WITH', 'cad_user_matriz.id = c2u.idUsers')
            ->leftJoin('ServicosLumaBundle:Unidade', 'unidForn', 'WITH', 'unidForn.unidCodigoid = cunid.unidCodigoid')
            ->leftJoin('ServicosGcdbBundle:CadUsers', 'cad_user_forn', 'WITH', 'cad_user_forn.id = unidForn.unidStechcodigoid')
            ->leftJoin('ServicosLumaBundle:RemessaOrdem', 'ro', 'WITH', 'ro.ordeCodigoid = oc.ordeCodigoid')
            ->leftJoin('ServicosLumaBundle:RemessaOrdemLog', 'rol', 'WITH', 'rol.idRemessaOrdem = ro.id');
        if(key_exists('where', $arrayParams) && count($arrayParams['where'])){
            $query->where('1 = 1');
            foreach($arrayParams['where'] as $key => $filter){
                $query->andWhere("$filter[0] $filter[1] $filter[2]");
            }
        }
        if(key_exists('groupBy', $arrayParams)){
            $query->groupby($arrayParams['groupBy']);
        }
        else{
            $query->groupby('cup.cotaunidprodCodigoid');
        }
        return $query->getQuery()->getArrayResult();
    }

    /**
     * Atualiza status das ordens
     *
     * @param  integer $status
     * @param  array $arrCodigosPedidos
     * @return array
     */
    public function updateStatusOrdensIntegracaoProtheus($status, $arrCodigosPedidos)
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryString = $queryBuilder->update('ServicosLumaBundle:Ordem', 'ordem')
            ->set('ordem.ordeStatusIntegracao', $queryBuilder->expr()->literal($status))
            ->where($queryBuilder->expr()->in('ordem.ordeCodigoid', $arrCodigosPedidos))
            ->getQuery();
        //print_r($queryString->getSql());
        return $queryString->execute();
    }


    public function logs($arrayParams){
        $query = $this->_em->createQueryBuilder();
        $query->select($arrayParams['campos'])
            ->from('ServicosLumaBundle:RemessaOrdemLog', 'rol')
            ->innerJoin('ServicosLumaBundle:RemessaOrdem', 'ro', 'WITH', 'rol.idRemessaOrdem = ro.id')
            ->innerJoin('ServicosLumaBundle:Ordem' , 'oc', 'WITH', 'oc.ordeCodigoid = ro.ordeCodigoid');

        if(key_exists('where', $arrayParams) && count($arrayParams['where'])) {
            $query->where('1 = 1');
            foreach($arrayParams['where'] as $key => $filter) {
                $query->andWhere("$filter[0] $filter[1] $filter[2]");
            }
        }

        if (key_exists('limit', $arrayParams) && is_numeric($arrayParams['limit'])){
            $query->getMaxResults($arrayParams['limit']);

            if (key_exists('ofset', $arrayParams) && is_numeric($arrayParams['ofset'])){
                $query->getFirstResult($arrayParams['ofset']);
            }
        }

        if (key_exists('order', $arrayParams) && trim($arrayParams['order']) != '' && isset($arrayParams['sort'])){
            $query->addOrderBy($arrayParams['sort'], $arrayParams['order']);
        }

        return $query->getQuery()->getArrayResult();
    }
}
