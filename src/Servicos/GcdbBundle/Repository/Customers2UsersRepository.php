<?php
namespace Servicos\GcdbBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * Customers2UsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Customers2UsersRepository extends EntityRepository
{
  /**
   * Consulta as do nome da filial
   * 
   * @param integer $id 
   */
  public function getFilialNameById($customerid) 
  {
	$manager = $this->getEntityManager();
	$connection = $manager->getConnection();

	$sql = "
	     SELECT cad_users_nome.nome AS nome_filial
	       FROM Customers2users AS ct
	            INNER JOIN cad_users_nome ON cad_users_nome.cad_users_id = ct.id_users
	      WHERE ct.id_customers = :id_customers
	";

    $parameters = array('id_customers' => $customerid);
    $inParameters = array('id_customers' => \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);

	$inParameters = array();
	foreach ($parameters as $key => $filter) {
		if (is_array($filter)) {
			$inParameters[$key] =\Doctrine\DBAL\Connection::PARAM_INT_ARRAY;
		}
	}

    $query = $connection->executeQuery($sql, $parameters, $inParameters);

    return $query->fetchAll();
  }

  public function getFilialFaturamentoNameById($id) 
  {
    $manager = $this->getEntityManager();
    $connection = $manager->getConnection();

    $sql = "
         SELECT cun.*
            FROM gcdb.cad_users u
      INNER JOIN gcdb.Customers2users c2u ON u.id = c2u.id_users
      INNER JOIN gcdb.Customers c ON c2u.id_customers = c.CustomerID
      INNER JOIN gcdb.cad_users_nome cun ON cun.cad_users_id = u.id
       LEFT JOIN luma.unidade un ON c.CustomerID = un.unid_stechcodigoid
       LEFT JOIN luma.tipounidade tu ON un.unid_codigoid = tu.unid_codigoid
       LEFT JOIN luma.tipo t ON tu.tipo_codigoid = t.tipo_codigoid
       where un.unid_codigoid = :unid_codigoid
       AND cun.adm_tipo_nome_id = 5;
    ";

    $parameters = array('unid_codigoid' => $id);

    $query = $connection->executeQuery($sql, $parameters, array());

    return $query->fetchAll();
  }
}