<?php

namespace Servicos\GcdbBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AutUsuariosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AutUsuariosRepository extends EntityRepository
{
    private $arrayColumnAutUsuarios = array(
    	'autUsua.id',
    	'autUsua.username',
    	'autUsua.pass',
    	'autUsua.nome',
    	'autUsua.ativo'
    );

	/**
     * Adiciona as condições na query
     *
     * @param array $arrayWhere Conjunto de condições passando coluna, o
     *                          operador e o(s) valor(es). Exemplo:
     *                              array('coluna1', '=', 'valor')
     *
     * @param \Doctrine\ORM\QueryBuilder $query Query aonde serão adicionadas
     *                                                as condições
     * @return $this
     */
    private function parseWhere($arrayWhere, $query)
    {
        if (count($arrayWhere) > 0) {
            foreach ($arrayWhere as $where) {
                if (count($where) < 3){
                    throw new \RuntimeException('Invalid argument');
                }
                $bind_parameter = 'a'.rand(0, 999999);
                if(strtoupper(trim($where[1])) == 'IS NOT'){
                    $query->andWhere($where[0].' IS NOT '.$where[2]);
                }elseif (strtoupper(trim($where[1])) == 'IS') {
                    $query->andWhere($where[0].' IS '.$where[2]);
                }elseif (strtoupper(trim($where[1])) == 'IN' && (count($where[2]) || count(explode(',', $where[2])))){
                    if(!is_array($where[2])){
                        $where[2] = explode(',', $where[2]);
                    }
                    $query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
                    $values = array_values($where[2]);

                    if(is_integer($values[0])){
                        $query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
                    }else{
                        $query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
                    }

                }elseif(strtoupper(trim($where[1])) == 'NOT IN' && (count($where[2]) || count(explode(',', $where[2])))){
                    if(!is_array($where[2])){
                        $where[2] = explode(',', $where[2]);
                    }
                    $query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
                    $values = array_values($where[2]);

                    if(is_integer($values[0])){
                        $query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
                    }else{
                        $query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
                    }
                }else{
                    $query->andWhere($where[0].' '.$where[1].' :'.$bind_parameter);
                    $query->setParameter($bind_parameter, $where[2]);
                }
            }
        }

        return $this;
    }

    public function getUsers($offset = 0, $limit = 100, $conditions = array())
    {
        $columns = 'autUsuar, autPerm, autOpco, autUsuarGrup, autGrup';
        $where = array();
        foreach($conditions as $key => $value) {
            switch ($key) {
                case 'username':
                case 'nome':
                    $value = trim($value);
                    $where[] = array("autUsuar.$key", 'LIKE', "%$value%");
                    break;
                case 'colaboradores':
                    if (!is_array($value)) {
                        $value = array($value);
                    }
                    $value = array_map($value, function($a) { return (int)$a; });
                    $where[] = array('autUsuar.id', 'IN', $value);
                    break;
            }
        }
        $query = $this->getUsersBaseQuery($offset, $limit, $where, array('autUsuar.id' => 'ASC'), $columns);
        return new Paginator($query);
    }

    private function getUsersBaseQuery($offset = 0, $limit = 100, $where = array(), $orderBy, $column)
    {
        $query = $this->_em->createQueryBuilder();
        $query->select($column)
            ->from("ServicosGcdbBundle:AutUsuarios", 'autUsuar')
            ->leftJoin("autUsuar.autPermissoes", "autPerm")
            ->leftJoin("autPerm.autOpcoes", "autOpco")
            ->leftJoin("autUsuar.autUsuariosHasGrupos", "autUsuarGrup")
            ->leftJoin("autUsuarGrup.autGrupos", "autGrup");

        $this->parseWhere($where, $query);

        if(is_array($orderBy) && count($orderBy)){
            foreach($orderBy as $order => $sort){
                $query->addOrderBy($order, $sort);
            }
        }

        if($offset){
            $query->setFirstResult($offset);
        }

        if($limit){
            $query->setMaxResults($limit);
        }

        $query = $query->getQuery();
        $query->setHydrationMode($query::HYDRATE_ARRAY);

        return $query;

    }

    public function listAutUsuarios($offset = 0, $limit = 50, $arrayWhere = array(), $orderBy = array('autUsua.id' => 'ASC'), $groupBy = array('autUsua.id')){
    	try{
    		$column = 'DISTINCT '.implode(',', $this->arrayColumnAutUsuarios);
    		return $this->findGeral($offset, $limit, $arrayWhere, $orderBy, $groupBy, $column);
    	}catch (\Exception $ex){
    		throw $ex;
    	}
    }

    public function countAutUsuarios($arrayWhere = array(), $orderBy = array('autUsua.id' => 'ASC'), $groupBy = array()){
    	try{
    		$column = 'COUNT(DISTINCT autUsua.id) AS total';
    		return $this->findGeral(0, 0, $arrayWhere, $orderBy, $groupBy, $column);
    	}catch (\Exception $ex){
    		throw $ex;
    	}
    }

    private function findGeral($offset = 0, $limit = 100, $arrayWhere = array(), $orderBy = array('autUsua.id' => 'ASC'), $groupBy = array(), $column = 'autUsua.id')
    {
    	try {
    		$query = $this->_em->createQueryBuilder();
    		$query->select($column)
    		->from("ServicosGcdbBundle:AutUsuarios", "autUsua")
    		//->leftJoin("line.billing", "bill", 'WITH', 'TO_CHAR(bill.billTimeStart, \'YYYY-MM\') = montpaym.usePeriod')
    		;

    		if (count($arrayWhere) > 0) {
    			foreach ($arrayWhere as $where) {
    				if (count($where) < 3){
    					throw new \RuntimeException('Invalid argument');
    				}
    				$bind_parameter = 'a'.rand(0, 999999);
    				if(strtoupper(trim($where[1])) == 'IS NOT'){
    					$query->andWhere($where[0].' IS NOT '.$where[2]);
    				}elseif (strtoupper(trim($where[1])) == 'IS') {
    					$query->andWhere($where[0].' IS '.$where[2]);
    				}elseif (strtoupper(trim($where[1])) == 'IN' && (count($where[2]) || count(explode(',', $where[2])))){
    					if(!is_array($where[2])){
    						$where[2] = explode(',', $where[2]);
    					}
    					$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
    					$values = array_values($where[2]);

    					if(is_integer($values[0])){
    						$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
    					}else{
    						$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
    					}

    				}elseif(strtoupper(trim($where[1])) == 'NOT IN' && (count($where[2]) || count(explode(',', $where[2])))){
    					if(!is_array($where[2])){
    						$where[2] = explode(',', $where[2]);
    					}
    					$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
    					$values = array_values($where[2]);

    					if(is_integer($values[0])){
    						$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
    					}else{
    						$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
    					}
    				}else{
    					$query->andWhere($where[0].' '.$where[1].' :'.$bind_parameter);
    					$query->setParameter($bind_parameter, $where[2]);
    				}
    			}
    		}

    		if(is_array($groupBy) && count($groupBy)){
    			foreach($groupBy as $group){
    				$query->addGroupBy($group);
    			}
    		}

    		if(is_array($orderBy) && count($orderBy)){
    			foreach($orderBy as $order => $sort){
    				$query->addOrderBy($order, $sort);
    			}
    		}

    		if($offset){
    			$query->setFirstResult($offset);
    		}

    		if($limit){
    			$query->setMaxResults($limit);
    		}

    		return $query->getQuery()->execute();

    	}catch (\Exception $e){
    		throw new \Exception($e->getMessage(), $e->getCode());
    	}
    }

    public function getUserNameById($autuser)
    {
    	try {
    		$user = $this->createQueryBuilder('u')
    		->where('u.id = :id')
    		->orderBy('u.id','DESC')
    		->setParameter('id', $autuser)
    		->getQuery()
    		->getOneOrNullResult();

    		if (null === $user) {
    			return '';
    		}
    	}
    	catch (\Exception $ex) {
    		throw $ex;
    	}

    	return $user->getNome();
    }


}
