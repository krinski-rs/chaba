<?php

namespace Servicos\GcdbBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;

/**
 * CadUsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CadUsersRepository extends EntityRepository
{
    private $arrayCampos = array(
        'DISTINCT c_filial.cnpj AS cnpj_filial_unidade',
        'c_filial.id as cad_user_filial',
        'contr.contCodigoid AS codigo_contrato',
        'IDENTITY(c2u.idCustomers) AS codigo_cliente',
        'cnj1.nome AS nome_juridico',
        '(select replace(group_concat(DISTINCT cnf1.nome), \',\', \' \') from ServicosGcdbBundle:CadUsersNome cnf1 where cnf1.cadUsers = c.id AND cnf1.admTipoNome IN (1,2,3) order by cnf1.admTipoNome) AS nome_fisico',
        'c.tipo AS tipo_pessoa',
        'cnj2.nome AS nome_reduzido_juridico',
        '(select replace(group_concat(DISTINCT cnf2.nome), \',\', \' \') from ServicosGcdbBundle:CadUsersNome cnf2 where cnf2.cadUsers = c.id AND cnf2.admTipoNome IN (1,2,3) order by cnf2.admTipoNome) AS nome_reduzido_fisico',
        'concat(log.nome ,\' \',c.endereco,\', \',c.numero) as endereco',
        'concat(tipoComp.nome,\' \',chComp.complemento) as numero',
        'uf.sigla AS estado',
        'c.bairro',
        'c.cep',
        'c.cnpj',
        'c.cpf',
        'UPPER(TRIM(c.inscEst)) as insc_estadual',
        'UPPER(TRIM(c.inscMun)) as insc_municipal',
        'SUBSTRING(cid.codigoIbge,3,5) as codigo_ibge',
        'cid.nome AS nome_cidade',
        'p.codigoBacen AS codigo_pais',
        'COALESCE( REPLACE(CONCAT_WS(\';\',GROUP_CONCAT(DISTINCT c2emailTec.email), GROUP_CONCAT(DISTINCT c2emailFin.email)), \',\', \';\'), cue.email) AS email_cliente',
        'cue.email AS email_padrao_cliente',
        'c.tipoCliente AS tipo_cliente',
        'c.atividadeRamo AS ramo_atividade',
        'serv.servCodigoid AS codigo_servico',
        'serv.servNome AS nome_servico'
    );

    /**
     * @param  array
     * @return data collection
     */
    public function getInformacoesClientesIntegracaoProtheus($arrayParams = array()) {
        $query = $this->_em->createQueryBuilder();

        /**
         * TODO: Ajustar os filtros SQL para quando os cadastro estiverem corretos
         */

        if(!isset($arrayParams['campos'])){
            $arrayParams['campos'] = $this->arrayCampos;
        }

        $query->select($this->arrayCampos)
            ->from('ServicosGcdbBundle:CadUsers', 'c') //CadUser Cliente
            ->innerJoin('ServicosGcdbBundle:Customers2users', 'c2u', 'WITH', 'c.id = c2u.idUsers')
            ->innerJoin('ServicosFinanceiroBundle:Contrato', 'contr', 'WITH', 'contr.clieCodigoid = c2u.idCustomers')
            ->innerJoin('ServicosFinanceiroBundle:ContratoServico', 'contr_s', 'WITH', 'contr_s.contCodigoid = contr.contCodigoid')
            ->innerJoin('ServicosFinanceiroBundle:ServicoCapacidade', 'serv_c', 'WITH', 'serv_c.servcapaCodigoid = contr_s.servcapaCodigoid')
            ->innerJoin('ServicosFinanceiroBundle:Servico', 'serv', 'WITH', 'serv.servCodigoid = serv_c.servCodigoid')

            ->leftJoin('ServicosLumaBundle:Unidade', 'u', 'WITH', ' u.unidCodigoid = contr.unidCodigoid')// Filial do Contrato
            ->leftJoin('ServicosLumaBundle:Tipounidade', 'tu', 'WITH', 'tu.unidCodigoid = u.unidCodigoid AND tu.tipoCodigoid = 1')
            ->leftJoin('ServicosGcdbBundle:Customers2users', 'c2u_filial', 'WITH', 'u.unidStechcodigoid = c2u_filial.idCustomers')
            ->leftJoin('ServicosGcdbBundle:CadUsers', 'c_filial', 'WITH', 'c_filial.id = c2u_filial.idUsers')//Usuario da Filial

            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnj1', 'WITH', 'cnj1.cadUsers = c.id AND cnj1.admTipoNome = 5 ')
            //->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnf1', 'WITH', 'cnf1.cadUsers = c.id AND cnf1.admTipoNome IN (1,2,3)')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnj2', 'WITH', 'cnj2.cadUsers = c.id AND cnj2.admTipoNome = 6')
            //->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnf2', 'WITH', 'cnf2.cadUsers = c.id AND cnf2.admTipoNome = 3')
            ->innerJoin('ServicosGcdbBundle:AdmUf', 'uf', 'WITH', 'uf.id = c.admUf')
            ->leftJoin('ServicosGcdbBundle:AdmLogradouro', 'log', 'WITH', 'log.id = c.admLogradouro')
            ->leftJoin('ServicosGcdbBundle:CadUserHasComplemento', 'chComp', 'WITH', 'chComp.cadUsers = c.id')
            ->leftJoin('ServicosGcdbBundle:AdmTipoComplemento', 'tipoComp', 'WITH', 'chComp.complemento = tipoComp.id')
            ->innerJoin('ServicosGcdbBundle:AdmCidades', 'cid', 'WITH', 'cid.id = c.admCidades')
            ->innerJoin('ServicosGcdbBundle:AdmPais', 'p', 'WITH', 'p.id = c.admPais')
            ->leftJoin('ServicosGcdbBundle:CadUsersEmail', 'cue', 'WITH', 'cue.cadUsers = c.id AND cue.principal = 1')

            ->leftJoin('ServicosGcdbBundle:CadLigacaoU2u','u2u', 'WITH', 'u2u.cadUsers2 = c_filial.id and u2u.admTipoLigacao=13')//Ligacao Matriz

           // ->leftJoin('ServicosGcdbBundle:CadLigacaoC2u', 'c2uFin', 'WITH', 'c2uFin.cadCid = contr.clieCodigoid AND c2uFin.admTipoLigacao = 8 and c2uFin.dtFim IS NULL') //Ligacao financeiro
            ->leftJoin('ServicosGcdbBundle:CadUsersEmail', 'c2emailFin', 'WITH', 'c2emailFin.cadUsers = c.id and c2emailFin.idAdmTipoLigacao = 8 ')

            //->leftJoin('ServicosGcdbBundle:CadLigacaoC2u', 'c2uTec', 'WITH', 'c2uTec.cadCid = contr.clieCodigoid AND c2uTec.admTipoLigacao = 7 and c2uTec.dtFim IS NULL ') //Ligacao Contato TÃ©cnico
            ->leftJoin('ServicosGcdbBundle:CadUsersEmail', 'c2emailTec', 'WITH', 'c2emailTec.cadUsers = c.id and c2emailTec.idAdmTipoLigacao = 7 ')


            ->where('u.unidAtivo = 1');


        if(key_exists('where', $arrayParams) && count($arrayParams['where'])) {
            $query->andWhere($arrayParams['where']);

        }



        $query->addGroupBy('contr.contCodigoid');

        return $query->getQuery()->getArrayResult();
    }



    public function getMatrizPelaFilial($customerId)
    {

        $query = $this->_em->createQueryBuilder();
        $query->select('cadUser')
            ->from("ServicosGcdbBundle:CadUsers", "cadUser")
            ->leftJoin('ServicosGcdbBundle:CadLigacaoU2u','u2u', 'WITH', 'u2u.cadUsers = cadUser.id and u2u.admTipoLigacao=13')//Ligacao Matriz
            ->leftJoin('ServicosGcdbBundle:Customers2users', 'c2u_relacao', 'WITH', 'u2u.cadUsers2 = c2u_relacao.idUsers')
            ->innerJoin('ServicosGcdbBundle:Customers2users', 'c2u', 'WITH', 'cadUser.id = c2u.idUsers')
            ->where( 'c2u.idCustomers = '.$customerId .' OR c2u_relacao.idCustomers = '.$customerId)
            ->setMaxResults(1);

        return $query->getQuery()->getArrayResult();
    }


    public function getFornecedoresIntegraacaoProtheus($arrayParam = array())
    {
        $query = $this->_em->createQueryBuilder();

        $query->select($arrayParam['campos'])
            ->from('ServicosGcdbBundle:CadUsers', 'c') //CadUser Cliente

            ->leftJoin('ServicosLumaBundle:Unidade', 'u', 'WITH', ' u.unidStechcodigoid = c.id')// Filial do Fornecedor
            ->leftJoin('ServicosLumaBundle:Tipounidade', 'tu', 'WITH', 'tu.unidCodigoid = u.unidCodigoid AND tu.tipoCodigoid = 10')

            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnj1', 'WITH', 'cnj1.cadUsers = c.id AND cnj1.admTipoNome = 5 ')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnf1', 'WITH', 'cnf1.cadUsers = c.id AND cnf1.admTipoNome = 1')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnj2', 'WITH', 'cnj2.cadUsers = c.id AND cnj2.admTipoNome = 6')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnf2', 'WITH', 'cnf2.cadUsers = c.id AND cnf2.admTipoNome = 3')
            ->innerJoin('ServicosGcdbBundle:AdmUf', 'uf', 'WITH', 'uf.id = c.admUf')
            ->innerJoin('ServicosGcdbBundle:AdmCidades', 'cid', 'WITH', 'cid.id = c.admCidades')
            ->innerJoin('ServicosGcdbBundle:AdmPais', 'p', 'WITH', 'p.id = c.admPais')
            ->leftJoin('ServicosGcdbBundle:CadUsersEmail', 'cue', 'WITH', 'cue.cadUsers = c.id AND cue.principal = 1');

        if(key_exists('where', $arrayParam) && count($arrayParam['where'])){
            $query->where('u.unidAtivo = 1');
            foreach($arrayParam['where'] as $key => $filter){
                $query->andWhere("$filter[0] $filter[1] $filter[2]");
            }
        }

        return $query->getQuery()->getArrayResult();
    }


    /**
     * @param  array
     * @return data collection
     */
    public function getNomeCadUsers($arrayParams = array())
    {
        $query = $this->_em->createQueryBuilder();

        $query->select($arrayParams['campos'])
            ->from('ServicosGcdbBundle:CadUsers', 'c') //CadUser Cliente
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnj1', 'WITH', 'cnj1.cadUsers = c.id AND cnj1.admTipoNome = 5 ')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnf1', 'WITH', 'cnf1.cadUsers = c.id AND cnf1.admTipoNome = 1')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnj2', 'WITH', 'cnj2.cadUsers = c.id AND cnj2.admTipoNome = 6')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnf2', 'WITH', 'cnf2.cadUsers = c.id AND cnf2.admTipoNome = 3');

        if(key_exists('where', $arrayParams) && count($arrayParams['where'])) {
            $query->where($arrayParams['where']);
        }

        return $query->getQuery()->getArrayResult();
    }

    /**
     * @param  array
     * @return data collection
     */
    public function getInformacoesDestinoMovimentacaoIntegracaoProtheus($arrayParams = array()) {
        $query = $this->_em->createQueryBuilder();

        /**
         * TODO: Ajustar os filtros SQL para quando os cadastro estiverem corretos
         */
        $query->select($arrayParams['campos'])
            ->from('ServicosGcdbBundle:CadUsers', 'c') //CadUser Cliente
            ->leftJoin('ServicosGcdbBundle:Customers2users', 'c2u', 'WITH', 'c.id = c2u.idUsers')
            ->leftJoin('ServicosFinanceiroBundle:Contrato', 'contr', 'WITH', 'contr.clieCodigoid = c2u.idCustomers')

            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnj1', 'WITH', 'cnj1.cadUsers = c.id AND cnj1.admTipoNome = 5 ')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnf1', 'WITH', 'cnf1.cadUsers = c.id AND cnf1.admTipoNome = 1')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnj2', 'WITH', 'cnj2.cadUsers = c.id AND cnj2.admTipoNome = 6')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnf2', 'WITH', 'cnf2.cadUsers = c.id AND cnf2.admTipoNome = 3')
            ->leftJoin('ServicosGcdbBundle:AdmUf', 'uf', 'WITH', 'uf.id = c.admUf')
            ->leftJoin('ServicosGcdbBundle:AdmLogradouro', 'log', 'WITH', 'log.id = c.admLogradouro')
            ->leftJoin('ServicosGcdbBundle:CadUserHasComplemento', 'chComp', 'WITH', 'chComp.cadUsers = c.id')
            ->leftJoin('ServicosGcdbBundle:AdmTipoComplemento', 'tipoComp', 'WITH', 'chComp.complemento = tipoComp.id')
            ->leftJoin('ServicosGcdbBundle:AdmCidades', 'cid', 'WITH', 'cid.id = c.admCidades')
            ->leftJoin('ServicosGcdbBundle:AdmPais', 'p', 'WITH', 'p.id = c.admPais')
            ->leftJoin('ServicosGcdbBundle:CadUsersEmail', 'cue', 'WITH', 'cue.cadUsers = c.id AND cue.principal = 1')

            ->leftJoin('ServicosGcdbBundle:CadLigacaoC2u', 'c2uFin', 'WITH', 'c2uFin.cadCid = c.id AND c2uFin.admTipoLigacao = 8') //Ligacao financeiro
            ->leftJoin('ServicosGcdbBundle:CadUsersEmail', 'c2emailFin', 'WITH', 'c2emailFin.cadUsers = c2uFin.cadUsers2 ')

            ->leftJoin('ServicosGcdbBundle:CadLigacaoC2u', 'c2uTec', 'WITH', 'c2uTec.cadCid = c.id AND c2uTec.admTipoLigacao = 7') //Ligacao Contato TÃ©cnico
            ->leftJoin('ServicosGcdbBundle:CadUsersEmail', 'c2emailTec', 'WITH', 'c2emailTec.cadUsers = c2uTec.cadUsers2 ');

        if(key_exists('where', $arrayParams) && count($arrayParams['where'])){
            $query->where('1 = 1');
            foreach($arrayParams['where'] as $key => $filter){
                $query->andWhere("$filter[0] $filter[1] $filter[2]");
            }
        }

        return $query->getQuery()->getArrayResult();
    }

    /**
     * @param  array
     * @return data collection
     */
    public function getInformacoesUnidadeIntegracaoProtheus($arrayParams = array()) {
        $query = $this->_em->createQueryBuilder();
        $query->select($arrayParams['campos'])
            ->from('ServicosGcdbBundle:CadUsers', 'c') //CadUser Cliente
            ->innerJoin('ServicosGcdbBundle:Customers2users', 'c2u', 'WITH', 'c.id = c2u.idUsers')
            ->leftJoin('ServicosLumaBundle:Unidade', 'u', 'WITH', ' u.unidStechcodigoid = c2u.idCustomers')
            ->leftJoin('ServicosLumaBundle:Tipounidade', 'tu', 'WITH', 'tu.unidCodigoid = u.unidCodigoid AND tu.tipoCodigoid = 1')
            ->where('u.unidAtivo = 1');

        if(key_exists('where', $arrayParams) && count($arrayParams['where'])) {
            $query->andWhere($arrayParams['where']);
        }

        return $query->getQuery()->getArrayResult();
    }


	private $arrayColumnCadUsers = array(
			'cadUser.id',
			'IF(cadUser.tipo = \'J\', cadNomeRazao.nome, \'\') AS razaoSocial',
			'IF(cadUser.tipo = \'J\', cadNomeFantasia.nome, \'\') AS nomeFantasia',
			'IF(cadUser.tipo = \'F\', REPLACE(GROUP_CONCAT(DISTINCT cadNome.nome), \',\', \' \'), \'\') AS nomeCliente',
			'cadUser.tipo',
			'cadUser.cnpj',
			'cadUser.cpf',
			'cadUser.inscEst',
			'cadUser.inscMun',
			'cadUser.senha',
			'cadUser.dtAbertura',
			'cadUser.cep',
			'cadUser.endereco',
			'cadUser.numero',
			'cadUser.bairro',
			'cadUser.latitude',
			'cadUser.longitude',
			'admLogr.id AS idAdmLogradouro',
			'admLogr.nome AS nomeAdmLogradouro',
			'admCida.id AS idAdmCidades',
			'admCida.nome AS nomeAdmCidades',
			'admUf.id AS idAdmUf',
			'admUf.nome AS nomeAdmUf',
			'admUf.sigla AS siglaAdmUf',
			'admPais.id AS idAdmPais',
			'admPais.nome AS nomeAdmPais',
			'admPais.sigla AS siglaAdmPais'
	);

	public function listColumn($offset = 0, $limit = 50, $arrayWhere = array(), $orderBy = array('cadUser.id' => 'ASC'), $groupBy = array('cadUser.id'), $arrayColumn = array('cadUser.id')){
		try{
			$column = implode(',', $arrayColumn);
			return $this->findGeral($offset, $limit, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}

	public function listCadUsers($offset = 0, $limit = 50, $arrayWhere = array(), $orderBy = array('cadUser.id' => 'ASC'), $groupBy = array('cadUser.id')){
		try{
			$column = implode(',', $this->arrayColumnCadUsers);
			return $this->findGeral($offset, $limit, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}

	public function getCadUsers($idCadUsers){
		try{
			$column = implode(',', $this->arrayColumnCadUsers);
			return $this->findGeral(0, 1, array(array('cadUser.id', '=', $idCadUsers)), array('cadUser.id' => 'ASC'), array('cadUser.id'), $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}

	public function countCadUsers($arrayWhere = array(), $orderBy = array('cadUser.id' => 'ASC'), $groupBy = array()){
		try{
			$column = 'COUNT(DISTINCT cadUser.id) AS total';
			return $this->findGeral(0, 0, $arrayWhere, $orderBy, $groupBy, $column);
		}catch (\Exception $ex){
			throw $ex;
		}
	}

	private function findGeral($offset = 0, $limit = 100, $arrayWhere = array(), $orderBy = array('cadUser.id' => 'ASC'), $groupBy = array(), $column = 'cadUser.id')
	{
		try {
			$query = $this->_em->createQueryBuilder();
			$query->select($column)
			->from("ServicosGcdbBundle:CadUsers", "cadUser")

 			->leftJoin("cadUser.cadUsersNome", "cadNomeRazao")
 			->leftJoin("cadNomeRazao.admTipoNome", "tipoNomeRazao", 'WITH', 'tipoNomeRazao.id = 5 AND cadUser.tipo = \'J\'')

 			->leftJoin("cadUser.cadUsersNome", "cadNomeFantasia")
 			->leftJoin("cadNomeFantasia.admTipoNome", "tipoNomeFantasia", 'WITH', 'tipoNomeFantasia.id = 6 AND cadUser.tipo = \'J\'')

 			->leftJoin("cadUser.cadUsersNome", "cadNome")
 			->leftJoin("cadNome.admTipoNome", "tipoNome", 'WITH', 'tipoNome.id IN (1,2,3) AND cadUser.tipo = \'F\' AND cadUser.id = cadNome.cadUsers')

 			->leftJoin("cadUser.admLogradouro", "admLogr")
 			->leftJoin("cadUser.segmento", "segmento")
 			->leftJoin("cadUser.admPais", "admPais")
 			->leftJoin("cadUser.admUf", "admUf")
 			->leftJoin("cadUser.admCidades", "admCida")

 			//->leftJoin("line.billing", "bill", 'WITH', 'TO_CHAR(bill.billTimeStart, \'YYYY-MM\') = montpaym.usePeriod')
			;

					if (count($arrayWhere) > 0) {
				foreach ($arrayWhere as $where) {
					if (count($where) < 3){
						throw new \RuntimeException('Invalid argument');
					}

					$bind_parameter = 'a'.rand(0, 999999);
					if(strtoupper(trim($where[1])) == 'IS NOT'){
						$query->andWhere($where[0].' IS NOT '.$where[2]);
					}elseif (strtoupper(trim($where[1])) == 'IS') {
						$query->andWhere($where[0].' IS '.$where[2]);
					}elseif (strtoupper(trim($where[1])) == 'IN' && (count($where[2]) || count(explode(',', $where[2])))){
						if(!is_array($where[2])){
							$where[2] = explode(',', $where[2]);
						}
						$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
						$values = array_values($where[2]);

						if(is_integer($values[0])){
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
						}else{
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
						}

					}elseif(strtoupper(trim($where[1])) == 'NOT IN' && (count($where[2]) || count(explode(',', $where[2])))){
						if(!is_array($where[2])){
							$where[2] = explode(',', $where[2]);
						}
						$query->andWhere(trim($where[0]).' '.trim($where[1]).' (:'.$bind_parameter.')');
						$values = array_values($where[2]);

						if(is_integer($values[0])){
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);
						}else{
							$query->setParameter(':'.$bind_parameter, array_values($where[2]), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
						}
					}elseif(strtoupper(trim($where[1])) == 'OR' && count($where[2])){
						$query->andWhere($where[0]);
						while($whereOr = current($where[2])){
	 						$query->setParameter(key($where[2]), $whereOr);
							next($where[2]);
						}
					}else{
						$query->andWhere($where[0].' '.$where[1].' :'.$bind_parameter);
						$query->setParameter($bind_parameter, $where[2]);
					}
				}
			}

			if(is_array($groupBy) && count($groupBy)){
				foreach($groupBy as $group){
					$query->addGroupBy($group);
				}
			}

			if(is_array($orderBy) && count($orderBy)){
				foreach($orderBy as $order => $sort){
					$query->addOrderBy($order, $sort);
				}
			}

			if($offset){
				$query->setFirstResult($offset);
			}

			if($limit){
				$query->setMaxResults($limit);
			}

			return $query->getQuery()->execute();

		}catch (\Exception $e){
			throw new \Exception($e->getMessage(), $e->getCode());
		}
	}

	public function loadUserByUsername($caduser)
    {
        try {
            $user = $this->createQueryBuilder('u')
                ->where('u.id = :id OR u.cpf = :cpf OR u.cnpj = :cnpj')
                ->orderBy('u.id','DESC')
                ->setParameter('id', $caduser)
                ->setParameter('cpf', $caduser)
                ->setParameter('cnpj', $caduser)
                ->getQuery()
                ->getOneOrNullResult()
            ;
            if (null === $user) {
                throw new UsernameNotFoundException(sprintf('NÃ£o foi possÃ­vel encontrar um usuÃ¡rio por "%s".',$caduser));
            }
        }
        catch (\Exception $ex) {
            throw $ex;
        }
        return $user;
    }

    public function loadUserById($caduser)
    {
        try {
            $user = $this->createQueryBuilder('u')
                ->where('u.id = :id')
                ->orderBy('u.id','DESC')
                ->setParameter('id', $caduser)
                ->getQuery()
                ->getOneOrNullResult()
            ;
            if (null === $user) {
                throw new UsernameNotFoundException(sprintf('NÃ£o foi possÃ­vel encontrar um usuÃ¡rio por "%s".',$caduser));
            }
        }
        catch (\Exception $ex) {
            throw $ex;
        }
        return $user;
    }

    public function getUserNameById($caduser)
    {
        try {
            $query = $this->createQueryBuilder('u');
            $user = $query->select(
                array(
                    'IF(u.tipo = \'J\', cadNomeRazao.nome, \'\') AS razaoSocial',
                    'IF(u.tipo = \'J\', cadNomeFantasia.nome, \'\') AS nomeFantasia',
                    'IF(u.tipo = \'F\', REPLACE(GROUP_CONCAT(cadNome.nome), \';\', \'\'), \'\') AS nomeCliente'
                )
            )
                  ->leftJoin("u.cadUsersNome", "cadNomeRazao", 'WITH', 'cadNomeRazao.admTipoNome = 5 AND u.tipo = \'J\'')
                  ->leftJoin("u.cadUsersNome", "cadNomeFantasia", 'WITH', 'cadNomeFantasia.admTipoNome = 6 AND u.tipo = \'J\'')
                  ->leftJoin("u.cadUsersNome", "cadNome", 'WITH', 'cadNome.admTipoNome IN (1,2,3) AND u.tipo = \'F\'')
                  ->where('u.id = :id')
                  ->setParameter('id', $caduser)
                  ->getQuery()
                  ->getOneOrNullResult();

            if (null === $user) {
                return '';
            }
        }
        catch (\Exception $ex) {
            throw $ex;
        }

        return $user['nomeCliente'] ? $user['nomeCliente'] : ($user['nomeFantasia'] ? $user['nomeFantasia'] : $user['razaoSocial']);
    }

    public function getFornecedores($arrayParams = array())
    {
        $query = $this->_em->createQueryBuilder();
        $query->select($arrayParams['campos'])
            ->from('ServicosGcdbBundle:CadUsers', 'cadUserForn')
            ->innerJoin('ServicosLumaBundle:Unidade', 'unidForn', 'WITH', 'cadUserForn.id = unidForn.unidStechcodigoid AND unidForn.unidAtivo = 1')
            ->innerJoin('ServicosLumaBundle:Tipounidade', 'tipoUnid', 'WITH', 'unidForn.unidCodigoid = tipoUnid.unidCodigoid AND tipoUnid.tipoCodigoid = 10')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnj1', 'WITH', 'cnj1.cadUsers = cadUserForn.id AND cnj1.admTipoNome = 5 ')
            ->leftJoin('ServicosGcdbBundle:CadUsersNome', 'cnj2', 'WITH', 'cnj2.cadUsers = cadUserForn.id AND cnj2.admTipoNome = 6');

        if(key_exists('where', $arrayParams) && count($arrayParams['where'])){
            $query->where('1 = 1');
            
            foreach($arrayParams['where'] as $key => $filter){
                $query->andWhere("$filter[0] $filter[1] $filter[2]");
            }
        }

        if(key_exists('groupBy', $arrayParams) && count($arrayParams['groupBy'])){
            foreach($arrayParams['groupBy'] as $group){
                $query->addGroupBy($group);
            }
        }

        if(key_exists('orderBy', $arrayParams) && count($arrayParams['orderBy'])){
            foreach($arrayParams['orderBy'] as $order => $sort){
                $query->addOrderBy($order, $sort);
            }
        }

        if(key_exists('offset', $arrayParams)){
            $query->setFirstResult($arrayParams['offset']);
        }
        
        if(key_exists('limit', $arrayParams)){
            $query->setMaxResults($arrayParams['limit']);
        }

        return $query->getQuery()->getArrayResult();
    }


    public function getCnpjCpfInfos($cnpj, $cpf)
    {
        $manager = $this->getEntityManager();
        $connection = $manager->getConnection();

        $sql = "
          SELECT u.*, un.unid_codigoid as unidade_id
            FROM gcdb.cad_users u
      INNER JOIN gcdb.Customers2users c2u ON u.id = c2u.id_users
      INNER JOIN gcdb.Customers c ON c2u.id_customers = c.CustomerID
       LEFT JOIN luma.unidade un ON c.CustomerID = un.unid_stechcodigoid
       LEFT JOIN luma.tipounidade tu ON un.unid_codigoid = tu.unid_codigoid
       LEFT JOIN luma.tipo t ON tu.tipo_codigoid = t.tipo_codigoid
        ";

        if ($cnpj) {
            $sql .= " WHERE (u.cnpj like '%$cnpj%')
             AND un.unid_ativo = 1
             AND t.tipo_codigoid = 1";
        }

        if ($cpf) {
            $sql .= " WHERE (u.cpf like '%$cpf%')";
        }

        $query = $connection->executeQuery($sql, array(), array());
        
        return $query->fetchAll();
    }
}
